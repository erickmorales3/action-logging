{
  "name": "Action Logging - Grails Plugin",
  "tagline": "Simplest debugging and better application security",
  "body": "# Action Logging - Grails Plugin\r\n\r\nStore detailed log of controller actions in database including controller name, action name, start-end time, total time (seconds), exceptions, custom messages and more.\r\n\r\n## Description\r\n\r\nIt's specially useful to developers and system administrators, because it store custom messages, exceptions and execution time. This allows to know application weaknesses to correct it before user report. In addition, it allows to identify the current user to create  a user action history.\r\n\r\nFor further information see [https://erickmorales3.github.io/action-logging/](https://erickmorales3.github.io/action-logging/)\r\n\r\n## Grails Version\r\n\r\n2.* >\r\n\r\n## Install\r\n\r\nRepository:\r\n\r\n```java\r\nmavenRepo \"http://dl.bintray.com/erickmorales3/maven\"\r\n```\r\n\r\nDependency:\r\n\r\n```java\r\ncompile \":action-logging:1.1.0\"\r\n```\r\n\r\n## How to use\r\n\r\nImport some annotation classes on the controller where you want to enable Action Logging.\r\n\r\n```java\r\nimport org.mirzsoft.grails.actionlogging.annotation.*\r\n```\r\n\r\nAdd @ActionLogging annotation\r\n\r\n```java\r\n@ActionLogging\r\nclass SampleController {\r\n\r\n}\r\n```\r\n\r\nThis way, will store a log of all existing actions in controller and the result can be seen navigating to http://your/app/path/actionLoggingEvent/index\r\n\r\n![alt tag](images/actionLoggingEventList.png)\r\n\r\n## Some examples\r\n\r\n#### Enable Action Logging to all controller actions except to specific one\r\n\r\n```java\r\n@ActionLogging\r\nclass SampleController {\r\n    \r\n    def index(){\r\n        \r\n    }\r\n    \r\n    @ActionLogging(false)\r\n    def methodWithoutActionLogging(){\r\n        \r\n    }\r\n}\r\n```\r\n\r\n#### Enable Action Logging to specific controller action\r\n\r\n```java\r\n\r\nclass SampleController {\r\n    \r\n    def index(){\r\n        \r\n    }\r\n    \r\n    @ActionLogging\r\n    def methodWithActionLogging(){\r\n        \r\n    }\r\n}\r\n```\r\n\r\n#### Adding custom log messages\r\n\r\nInject actionLoggingService class:\r\n\r\n```java\r\n@ActionLogging\r\nclass SampleController {\r\n    def actionLoggingService\r\n    \r\n    def index(){\r\n        actionLoggingService.log(\"A custom log message 1\")\r\n        actionLoggingService.log(\"A custom log message 2\")\r\n    }\r\n}\r\n```\r\n\r\n#### Managing custom log messages with Logger implementation\r\n\r\nBy default custom messages are only visible in Action Logging Event List screen or in action_loging database table, but is possible manage log levels and incorporate it with your own log implementation like logback, log4j, etc. Adding the @PrintCustomLog annotation and importing LoggingLevel class:\r\n\r\n- To all controller actions\r\n\r\n```java\r\nimport org.mirzsoft.grails.actionlogging.Constants.LoggingLevel\r\n\r\n@ActionLogging\r\n@PrintCustomLog\r\nclass SampleController {\r\n    def actionLoggingService\r\n    \r\n    def index(){\r\n        actionLoggingService.log(LoggingLevel.INFO, \"A custom log message 1 - printed\")\r\n        actionLoggingService.log(LoggingLevel.INFO, \"A custom log message 2 - printed\")\r\n    }\r\n}\r\n```\r\n\r\n- To all controller actions except to specific one\r\n\r\n```java\r\nimport org.mirzsoft.grails.actionlogging.Constants.LoggingLevel\r\n\r\n@ActionLogging\r\n@PrintCustomLog\r\nclass SampleController {\r\n    def actionLoggingService\r\n    \r\n    def index(){\r\n        actionLoggingService.log(LoggingLevel.INFO, \"A custom log message 1 - printed\")\r\n        actionLoggingService.log(LoggingLevel.INFO, \"A custom log message 2 - printed\")\r\n    }\r\n    \r\n    @PrintCustomLog(false)\r\n    def methodWithoutCustomPrint(){\r\n        actionLoggingService.log(\"A custom log message 3\")\r\n        actionLoggingService.log(\"A custom log message 4\")\r\n    }\r\n}\r\n```\r\n\r\n- To specific controller action\r\n\r\n```java\r\nimport org.mirzsoft.grails.actionlogging.Constants.LoggingLevel\r\n\r\n@ActionLogging\r\nclass SampleController {\r\n    def actionLoggingService\r\n    \r\n    def index(){\r\n        actionLoggingService.log(\"A custom log message 1\")\r\n        actionLoggingService.log(\"A custom log message 2\")\r\n    }\r\n    \r\n    @PrintCustomLog\r\n    def methodWithCustomPrint(){\r\n        actionLoggingService.log(LoggingLevel.INFO, \"A custom log message 3 - printed\")\r\n        actionLoggingService.log(LoggingLevel.INFO, \"A custom log message 4 - printed\")\r\n    }\r\n}\r\n```\r\n\r\nAvailable Logging levels: TRACE, DEBUG, INFO, WARN, ERROR.\r\n\r\nNote: If level is not specified, custom messages will printed using println function.\r\n\r\n\r\n#### Setting action type to all controller actions\r\n\r\n```java\r\n@ActionLogging\r\n@ActionType(\"Administrator/Supervisor Actions\")\r\nclass SampleController {\r\n    \r\n}\r\n```\r\n\r\n#### Identifying current user with Spring Security Core Plugin\r\n\r\n```java\r\n@ActionLogging\r\n@SpringUserIdentification\r\nclass SampleController {\r\n    \r\n}\r\n```\r\n\r\n#### Identifying current user without Spring Security Core Plugin\r\n\r\n```java\r\n@ActionLogging\r\nclass SampleController {\r\n    def actionLoggingService\r\n    \r\n    def index(){\r\n        actionLoggingService.setUserId(3)\r\n    }\r\n}\r\n```\r\n\r\n#### Setting custom action name\r\n\r\n- Using @CustomActionName annotation\r\n\r\n```java\r\n@ActionLogging\r\nclass SampleController {\r\n    @CustomActionName(\"Custom action name\")\r\n    def index(){\r\n        \r\n    }\r\n}\r\n```\r\n\r\n- Using actionLoggingService class\r\n\r\n```java\r\n@ActionLogging\r\nclass SampleController {\r\n    def actionLoggingService\r\n    \r\n    def index(){\r\n        actionLoggingService.setCustomActionName(\"Custom action name\")\r\n    }\r\n}\r\n```\r\n\r\n#### Setting action type to specific action\r\n\r\n- Using @ActionType annotation\r\n\r\n```java\r\n@ActionLogging\r\nclass SampleController {\r\n    @ActionType(\"Administrator Action\")\r\n    def index(){\r\n        \r\n    }\r\n}\r\n```\r\n\r\n- Using actionLoggingService class\r\n\r\n```java\r\n@ActionLogging\r\nclass SampleController {\r\n    def actionLoggingService\r\n    \r\n    def index(){\r\n        actionLoggingService.setActionType(\"Administrator Action\")\r\n    }\r\n}\r\n```\r\n\r\nIt overrides action type defined in class declaration.\r\n\r\n#### Setting handled exception in try catch block\r\n\r\nThe handled exception in try catch block are omited, but is posible setting an exception object manually, as follows:\r\n\r\n```java\r\n@ActionLogging\r\nclass SampleController {\r\n    def actionLoggingService\r\n    \r\n    def index(){\r\n        try {\r\n            def a = 1 / 0\r\n        } catch (ex) {\r\n            actionLoggingService.setCustomException(ex)\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\nLicense\r\n----\r\n\r\n MIT License\r\n\r\n### Thanks\r\n\r\n* @burtbeckwith \r\n* @rpalcolea\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}